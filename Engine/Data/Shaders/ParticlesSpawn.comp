#version 460

#include "ShaderLayouts.h"
#include "ShaderFunctions.h"

layout (local_size_x = 1) in;

layout (binding = 0) uniform globalUniform
{
    GlobalLayout globalLayout;
};

layout (binding = 1) buffer spawnUniform
{
	ParticlesSpawnLayout spawn;
};

layout (binding = 2) buffer particlesUniform
{
	ParticlesLayout particles;
};

layout (binding = 3) buffer dispatchIndirectCommandUniform
{
	VkDispatchIndirectCommand vkDispatchIndirectCommand;
};

layout (binding = 4) buffer drawIndirectCommandUniform
{
	VkDrawIndexedIndirectCommand vkDrawIndexedIndirectCommand;
};

layout (binding = 5) buffer drawIndirectCommandUniformLighting
{
	VkDrawIndexedIndirectCommand vkDrawIndexedIndirectCommandLighting;
};

void main()
{
	// Reset?
	if (spawn.i4Misc.y == 1)
	{
		particles.i4Misc.x = 0;
		particles.i4Misc.y = 0;
		particles.f4Misc.x = globalLayout.f4Misc.x;
		for (int i = 0; i < kiMaxParticles; ++i)
		{
		#if defined(ENABLE_32_BIT_BOOL)
			particles.puiAllocated[i / 32] &= ~(1 << (i % 32));
		#else
			particles.pbAllocated[i] = uint8_t(0);
		#endif
		}

		vkDispatchIndirectCommand.x = 0;
		vkDispatchIndirectCommand.y = 0;
		vkDispatchIndirectCommand.z = 0;

		vkDrawIndexedIndirectCommand.indexCount = 0;
		vkDrawIndexedIndirectCommand.instanceCount = 0;
		vkDrawIndexedIndirectCommand.firstIndex = 0;
		vkDrawIndexedIndirectCommand.vertexOffset = 0;
		vkDrawIndexedIndirectCommand.firstInstance = 0;

		vkDrawIndexedIndirectCommandLighting.indexCount = 0;
		vkDrawIndexedIndirectCommandLighting.instanceCount = 0;
		vkDrawIndexedIndirectCommandLighting.firstIndex = 0;
		vkDrawIndexedIndirectCommandLighting.vertexOffset = 0;
		vkDrawIndexedIndirectCommandLighting.firstInstance = 0;

		return;
	}

	// Copy the particles in the spawn buffer into the particle buffer
#if defined(ENABLE_SHADER_REALTIME_CLOCK_EXT)
	uint64_t uiStartTime = clockRealtimeEXT();
#endif
	if (spawn.i4Misc.x > 0)
	{
		int32_t iSpawnIndex = 0;
		for (int32_t i = particles.i4Misc.y; i < kiMaxParticles; ++i)
		{
		#if defined(ENABLE_32_BIT_BOOL)
			if ((particles.puiAllocated[i / 32] & (1 << (i % 32))) == 0)
		#else
			if (particles.pbAllocated[i] == 0)
		#endif
			{
				particles.i4Misc.y = i + 1;

			#if defined(ENABLE_32_BIT_BOOL)
				particles.puiAllocated[i / 32] |= 1 << (i % 32);
			#else
				particles.pbAllocated[i] = uint8_t(1);
			#endif
				particles.pParticles[i] = spawn.pParticles[iSpawnIndex++];
				particles.i4Misc.x = max(particles.i4Misc.x, i + 1);
				if (iSpawnIndex == spawn.i4Misc.x)
				{
					break;
				}
			}
		}
	}
#if defined(ENABLE_SHADER_REALTIME_CLOCK_EXT)
	uint64_t uiEndTime = clockRealtimeEXT();
	debugPrintfEXT("Spawn: %d (%lu)", spawn.i4Misc.x, (uiEndTime - uiStartTime) / 1000);
#endif

	// Calculate the time since the last update, this value will be used by ParticlesUpdate
	float fCurrentTime = globalLayout.f4Misc.x;
	particles.f4Misc.y = max(0.0f, fCurrentTime - particles.f4Misc.x);
	particles.f4Misc.x = fCurrentTime;

	// Update 'count'
	int32_t iCount = 0;
	for (int32_t i = particles.i4Misc.x - 1; i >= 0; --i)
	{
	#if defined(ENABLE_32_BIT_BOOL)
		if ((particles.puiAllocated[i / 32] & (1 << (i % 32))) != 0)
	#else
		if (particles.pbAllocated[i] == 1)
	#endif
		{
			iCount = i + 1;
			break;
		}
	}
	particles.i4Misc.x = iCount;

	// Fill in the dispatch command that will control the ParticlesUpdate compute shader
	vkDispatchIndirectCommand.x = particles.i4Misc.x;
	vkDispatchIndirectCommand.y = 1;
	vkDispatchIndirectCommand.z = 1;

	// Fill in the draw command that will control the ParticlesRender vertex shader
	vkDrawIndexedIndirectCommand.indexCount = 6;
	vkDrawIndexedIndirectCommand.instanceCount = particles.i4Misc.x;
	vkDrawIndexedIndirectCommand.firstIndex = 0;
	vkDrawIndexedIndirectCommand.vertexOffset = 0;
	vkDrawIndexedIndirectCommand.firstInstance = 0;

	vkDrawIndexedIndirectCommandLighting.indexCount = 6;
	vkDrawIndexedIndirectCommandLighting.instanceCount = particles.i4Misc.x;
	vkDrawIndexedIndirectCommandLighting.firstIndex = 0;
	vkDrawIndexedIndirectCommandLighting.vertexOffset = 0;
	vkDrawIndexedIndirectCommandLighting.firstInstance = 0;
}
